

Author of this implementation: Kavita Chopra (2016, version 1.0)

RUN THE CODE: 

TRAINING: 
- "python bilinear.py" for training with non-diagonal Mr 
- "python bilinear.py diagonal" to train the bilinear diagonal model
EVALUATION: 
- "python bilinear.py evaluate" for evaluation with non-diagonal Mr 
- "python bilinear.py diagonal evaluate" to evaluate the bilinear diagonal model


References:

Bilinear model using Alternative Least Square Optimization (RESCAL): 
- "A three way model for collective learning on multi-relational data", 
   Nickel et al., 2011
  "Factorization of Yago" - Nickel et al., 2012
Tensor Network Formulation of Rescal: 
- "Embedding Entities and Relations for Learning and Inference in Knowledge Bases", 
   B. Yang et al. (2014)

Description of the Representation Learning Model
- Rescal is based on the factorization of a 3 mode tensor (3 dimensional matrix)
  where the aim is to solve the model parameters A and Mr given the low rank factorization 
  Xk = A x Mr x A^T
- A is a n x n_red (with rank n_red << n (#entities)) matrix representing the entity embedding
- Mr is a r x n_red matrix and there are as many different Mr's as there are relations in the triple store

The Neural Tensor Network Approach
- In a neural tensor network approach, this factorization is solved through a 2 layer network: 
- 1st layer: yi = xi * W  where xi is a one-hot vector for an entity representation (n-dimensional)
                      and W is a n x r matrix parameter that is to be learned
- 2nd layer: score = yh * Mr * yt where yh is the learned entity representation for a head
                                  Mr is the relation matrix for relation r and yt is the 
                                  learned entity representation for the tail entitiy 
- in the 2nd layer scores are computed for the positive and negative triple and optimized 
  by the loss function in a way, that positive triples get a higher score and negative triples a lower 


Variation of Rescal: Bilinear Diagonal Model
- In the bilinear diagonal model Mr is restricted to be a diagonal matrix to reduce the 
  complexity of the model 
- see "Embedding Entities and Relations for Learning and Inference in Knowledge Bases", 
  B. Yang et al. (2014)
- run diagonal-bilinear training with "python bilinear.py diagonal"
                                  

Input
- training data consisting of two sets: positive training data (true triples), and 
- negative training data, where for every positive triple there are two corrupted
  triples: one where head is replaced and the other where tail is corrupted  
- Hyperparameters: 
  factorization rank (dimension to which n is reduced to) n_red, learning rate

Optimization Procedure
- stochastic gradient descent with mini-batches using Adagrad-method

Knowledge Base
- subset of Freebase (FBK15) with frequent entities also present in Wikilinks

Split of Data
- training data: ~480,000 triples
- validation set   50,000    "
- test set         59,000    "
- all sets are disjoint
- validation on valid data set used to measure performance of model during training and 
  for employment of early stopping before a maximimum epoch-bound (e.g. 1000)

Validation and Evaluation Protocol
- for validation mean ranks of correct triples from a list of corrupted triples are reported
- evaluation on test data after training is complete to measure the quality of the final model 
- for evaluation hits at ten (proportion of true triples from top ten ranks) are reported

Implementation Remarks
- before training a new model:
    - meta-data-file with the customized configurations is created and saved in 'models/' directory
    - meta-data-file is updated each time training is resumed at a different time 
    - initial embedding is saved to disk for visualization purposes e.g. after dimensionality reduction through PCA
- at customizable intervals current model is saved to disk so that training may be continued in different sessions
- global- and hyper-parameters of the model can be configured in the params.py file
- in related works normalizing entities has been shown to improve results: in params.py this can be prevented which will 
  create model names attached by 'not normalized'

Plotting Models: 
- all the trained models in the model directory can be plotted by running plot_bilinear.py with the following arguments: 
- 'python plot_bilinear.py [not normalized]'
- 'python plot_bilinear.py diagonal [not normalized]'



